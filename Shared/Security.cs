using System;
using System.Security.Cryptography;
using System.Text;

namespace Shared;

/// <summary>
///   Keycode rotator for IPC messaging. 
/// </summary>
/// <remarks>
///   For a production environment you wouldn't want this library to be public-facing.
///   This could be defeated easily by a malicious user with a tool such as Ghidra.
/// </remarks>
public static class SecurityHelper
{
    /// <summary>
    /// Generates a secure numeric code based on the current UTC hour.
    /// </summary>
    /// <param name="secretKey">A secret key (string) to use for the code generation.  This key *must* be shared between the code generator and the verifier.</param>
    /// <returns>A string representing the secure numeric code.</returns>
    public static string GenerateSecureCode(string secretKey)
    {
        if (string.IsNullOrEmpty(secretKey))
            throw new ArgumentException("Secret key cannot be null or empty.", nameof(secretKey));

        // 1. Get the current UTC hour.
        int utcHour = DateTime.UtcNow.Hour;

        // 2. Combine the UTC hour with the secret key.
        string dataToHash = $"{utcHour}:{secretKey}";

        // 3. Hash the combined data using HMACSHA256.
        using (HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey)))
        {
            byte[] hashBytes = hmac.ComputeHash(Encoding.UTF8.GetBytes(dataToHash));

            // 4. Convert the hash to a numeric code (e.g., a 6-digit code).
            //    We'll take the first 6 bytes of the hash, convert them to an integer,
            //    and then format it as a 6-digit string (padding with zeros if needed).
            long numericCode = BitConverter.ToInt64(hashBytes, 0); // Use ToInt64 for a larger range
            string codeString = Math.Abs(numericCode % 1000000).ToString("D6"); // Get the absolute value, modulo 1000000, and format to 6 digits
            return codeString;
        }
    }

    /// <summary>
    /// Verifies a secure numeric code generated by GenerateSecureCode.
    /// </summary>
    /// <param name="code">The code to verify.</param>
    /// <param name="secretKey">The secret key used to generate the code.  Must be the same as the key used for generation.</param>
    /// <returns>True if the code is valid (matches the generated code for the current UTC hour), false otherwise.</returns>
    public static bool VerifySecureCode(string code, string secretKey)
    {
        if (string.IsNullOrEmpty(code) || string.IsNullOrEmpty(secretKey))
            return false; // Invalid code or secret key

        string expectedCode = GenerateSecureCode(secretKey);
        return code == expectedCode;
    }
}
